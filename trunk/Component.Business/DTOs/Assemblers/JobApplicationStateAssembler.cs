//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2016/02/22 - 20:58:48
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using JobsInABA.BL.DTOs;
using JobsInABA.DAL.Entities;

namespace JobsInABA.BL.DTOs.Assemblers
{

    /// <summary>
    /// Assembler for <see cref="JobApplicationState"/> and <see cref="JobApplicationStateDTO"/>.
    /// </summary>
    public static partial class JobApplicationStateAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="JobApplicationStateDTO"/> converted from <see cref="JobApplicationState"/>.</param>
        static partial void OnDTO(this JobApplicationState entity, JobApplicationStateDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="JobApplicationState"/> converted from <see cref="JobApplicationStateDTO"/>.</param>
        static partial void OnEntity(this JobApplicationStateDTO dto, JobApplicationState entity);

        /// <summary>
        /// Converts this instance of <see cref="JobApplicationStateDTO"/> to an instance of <see cref="JobApplicationState"/>.
        /// </summary>
        /// <param name="dto"><see cref="JobApplicationStateDTO"/> to convert.</param>
        public static JobApplicationState ToEntity(this JobApplicationStateDTO dto)
        {
            if (dto == null) return null;

            var entity = new JobApplicationState();

            entity.JobApplicationStateID = dto.JobApplicationStateID;
            entity.JobApplicationID = dto.JobApplicationID;
            entity.JobApplicationStatusID = dto.JobApplicationStatusID;
            entity.insdt = dto.insdt;
            entity.insuser = dto.insuser;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="JobApplicationState"/> to an instance of <see cref="JobApplicationStateDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="JobApplicationState"/> to convert.</param>
        public static JobApplicationStateDTO ToDTO(this JobApplicationState entity)
        {
            if (entity == null) return null;

            var dto = new JobApplicationStateDTO();

            dto.JobApplicationStateID = entity.JobApplicationStateID;
            dto.JobApplicationID = entity.JobApplicationID;
            dto.JobApplicationStatusID = entity.JobApplicationStatusID;
            dto.insdt = entity.insdt;
            dto.insuser = entity.insuser;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="JobApplicationStateDTO"/> to an instance of <see cref="JobApplicationState"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<JobApplicationState> ToEntities(this IEnumerable<JobApplicationStateDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="JobApplicationState"/> to an instance of <see cref="JobApplicationStateDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<JobApplicationStateDTO> ToDTOs(this IEnumerable<JobApplicationState> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
