//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2016/02/22 - 20:58:49
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using JobsInABA.BL.DTOs;
using JobsInABA.DAL.Entities;

namespace JobsInABA.BL.DTOs.Assemblers
{

    /// <summary>
    /// Assembler for <see cref="UserAccount"/> and <see cref="UserAccountDTO"/>.
    /// </summary>
    public static partial class UserAccountAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="UserAccountDTO"/> converted from <see cref="UserAccount"/>.</param>
        static partial void OnDTO(this UserAccount entity, UserAccountDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="UserAccount"/> converted from <see cref="UserAccountDTO"/>.</param>
        static partial void OnEntity(this UserAccountDTO dto, UserAccount entity);

        /// <summary>
        /// Converts this instance of <see cref="UserAccountDTO"/> to an instance of <see cref="UserAccount"/>.
        /// </summary>
        /// <param name="dto"><see cref="UserAccountDTO"/> to convert.</param>
        public static UserAccount ToEntity(this UserAccountDTO dto)
        {
            if (dto == null) return null;

            var entity = new UserAccount();

            entity.UserAccountID = dto.UserAccountID;
            entity.UserID = dto.UserID;
            entity.UserName = dto.UserName;
            entity.Password = dto.Password;
            entity.IsActive = dto.IsActive;
            entity.IsDeleted = dto.IsDeleted;
            entity.insuser = dto.insuser;
            entity.insdt = dto.insdt;
            entity.upduser = dto.upduser;
            entity.upddt = dto.upddt;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="UserAccount"/> to an instance of <see cref="UserAccountDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="UserAccount"/> to convert.</param>
        public static UserAccountDTO ToDTO(this UserAccount entity)
        {
            if (entity == null) return null;

            var dto = new UserAccountDTO();

            dto.UserAccountID = entity.UserAccountID;
            dto.UserID = entity.UserID;
            dto.UserName = entity.UserName;
            dto.Password = entity.Password;
            dto.IsActive = entity.IsActive;
            dto.IsDeleted = entity.IsDeleted;
            dto.insuser = entity.insuser;
            dto.insdt = entity.insdt;
            dto.upduser = entity.upduser;
            dto.upddt = entity.upddt;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="UserAccountDTO"/> to an instance of <see cref="UserAccount"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<UserAccount> ToEntities(this IEnumerable<UserAccountDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="UserAccount"/> to an instance of <see cref="UserAccountDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<UserAccountDTO> ToDTOs(this IEnumerable<UserAccount> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
