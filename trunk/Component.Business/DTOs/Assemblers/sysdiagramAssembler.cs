/*
Project: Jobs In ABA
Authoer: Ghanshyam Bhalala
Date Created: 2015-12-04

*/
//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2016/01/01 - 02:55:50
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using JobsInABA.DTOs;
using JobsInABA.DAL.Entities;

namespace JobsInABA.DTOs.Assemblers
{

    /// <summary>
    /// Assembler for <see cref="sysdiagram"/> and <see cref="sysdiagramDTO"/>.
    /// </summary>
    public static partial class sysdiagramAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="sysdiagramDTO"/> converted from <see cref="sysdiagram"/>.</param>
        static partial void OnDTO(this sysdiagram entity, sysdiagramDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="sysdiagram"/> converted from <see cref="sysdiagramDTO"/>.</param>
        static partial void OnEntity(this sysdiagramDTO dto, sysdiagram entity);

        /// <summary>
        /// Converts this instance of <see cref="sysdiagramDTO"/> to an instance of <see cref="sysdiagram"/>.
        /// </summary>
        /// <param name="dto"><see cref="sysdiagramDTO"/> to convert.</param>
        public static sysdiagram ToEntity(this sysdiagramDTO dto)
        {
            if (dto == null) return null;

            var entity = new sysdiagram();

            entity.name = dto.name;
            entity.principal_id = dto.principal_id;
            entity.diagram_id = dto.diagram_id;
            entity.version = dto.version;
            entity.definition = dto.definition;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="sysdiagram"/> to an instance of <see cref="sysdiagramDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="sysdiagram"/> to convert.</param>
        public static sysdiagramDTO ToDTO(this sysdiagram entity)
        {
            if (entity == null) return null;

            var dto = new sysdiagramDTO();

            dto.name = entity.name;
            dto.principal_id = entity.principal_id;
            dto.diagram_id = entity.diagram_id;
            dto.version = entity.version;
            dto.definition = entity.definition;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="sysdiagramDTO"/> to an instance of <see cref="sysdiagram"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<sysdiagram> ToEntities(this IEnumerable<sysdiagramDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="sysdiagram"/> to an instance of <see cref="sysdiagramDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<sysdiagramDTO> ToDTOs(this IEnumerable<sysdiagram> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
