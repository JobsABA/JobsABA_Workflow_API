//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2016/02/22 - 20:58:47
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using JobsInABA.BL.DTOs;
using JobsInABA.DAL.Entities;

namespace JobsInABA.BL.DTOs.Assemblers
{

    /// <summary>
    /// Assembler for <see cref="Image"/> and <see cref="ImageDTO"/>.
    /// </summary>
    public static partial class ImageAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="ImageDTO"/> converted from <see cref="Image"/>.</param>
        static partial void OnDTO(this Image entity, ImageDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Image"/> converted from <see cref="ImageDTO"/>.</param>
        static partial void OnEntity(this ImageDTO dto, Image entity);

        /// <summary>
        /// Converts this instance of <see cref="ImageDTO"/> to an instance of <see cref="Image"/>.
        /// </summary>
        /// <param name="dto"><see cref="ImageDTO"/> to convert.</param>
        public static Image ToEntity(this ImageDTO dto)
        {
            if (dto == null) return null;

            var entity = new Image();

            entity.ImageID = dto.ImageID;
            entity.Name = dto.Name;
            entity.ImageTypeID = dto.ImageTypeID;
            entity.ImageExtension = dto.ImageExtension;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Image"/> to an instance of <see cref="ImageDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="Image"/> to convert.</param>
        public static ImageDTO ToDTO(this Image entity)
        {
            if (entity == null) return null;

            var dto = new ImageDTO();

            dto.ImageID = entity.ImageID;
            dto.Name = entity.Name;
            dto.ImageTypeID = entity.ImageTypeID;
            dto.ImageExtension = entity.ImageExtension;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="ImageDTO"/> to an instance of <see cref="Image"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Image> ToEntities(this IEnumerable<ImageDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Image"/> to an instance of <see cref="ImageDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<ImageDTO> ToDTOs(this IEnumerable<Image> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
