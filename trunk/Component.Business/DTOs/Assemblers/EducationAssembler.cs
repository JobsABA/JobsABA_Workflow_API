//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2016/02/22 - 20:58:47
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using JobsInABA.BL.DTOs;
using JobsInABA.DAL.Entities;

namespace JobsInABA.BL.DTOs.Assemblers
{

    /// <summary>
    /// Assembler for <see cref="Education"/> and <see cref="EducationDTO"/>.
    /// </summary>
    public static partial class EducationAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="EducationDTO"/> converted from <see cref="Education"/>.</param>
        static partial void OnDTO(this Education entity, EducationDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Education"/> converted from <see cref="EducationDTO"/>.</param>
        static partial void OnEntity(this EducationDTO dto, Education entity);

        /// <summary>
        /// Converts this instance of <see cref="EducationDTO"/> to an instance of <see cref="Education"/>.
        /// </summary>
        /// <param name="dto"><see cref="EducationDTO"/> to convert.</param>
        public static Education ToEntity(this EducationDTO dto)
        {
            if (dto == null) return null;

            var entity = new Education();

            entity.EducationID = dto.EducationID;
            entity.UserID = dto.UserID;
            entity.InstituteName = dto.InstituteName;
            entity.Degree = dto.Degree;
            entity.Description = dto.Description;
            entity.StartDate = dto.StartDate;
            entity.EndDate = dto.EndDate;
            entity.IsActive = dto.IsActive;
            entity.IsDelete = dto.IsDelete;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Education"/> to an instance of <see cref="EducationDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="Education"/> to convert.</param>
        public static EducationDTO ToDTO(this Education entity)
        {
            if (entity == null) return null;

            var dto = new EducationDTO();

            dto.EducationID = entity.EducationID;
            dto.UserID = entity.UserID;
            dto.InstituteName = entity.InstituteName;
            dto.Degree = entity.Degree;
            dto.Description = entity.Description;
            dto.StartDate = entity.StartDate;
            dto.EndDate = entity.EndDate;
            dto.IsActive = entity.IsActive;
            dto.IsDelete = entity.IsDelete;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="EducationDTO"/> to an instance of <see cref="Education"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Education> ToEntities(this IEnumerable<EducationDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Education"/> to an instance of <see cref="EducationDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<EducationDTO> ToDTOs(this IEnumerable<Education> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
