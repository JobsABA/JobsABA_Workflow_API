//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2016/02/22 - 20:58:48
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using JobsInABA.BL.DTOs;
using JobsInABA.DAL.Entities;

namespace JobsInABA.BL.DTOs.Assemblers
{

    /// <summary>
    /// Assembler for <see cref="Language"/> and <see cref="LanguageDTO"/>.
    /// </summary>
    public static partial class LanguageAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="LanguageDTO"/> converted from <see cref="Language"/>.</param>
        static partial void OnDTO(this Language entity, LanguageDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Language"/> converted from <see cref="LanguageDTO"/>.</param>
        static partial void OnEntity(this LanguageDTO dto, Language entity);

        /// <summary>
        /// Converts this instance of <see cref="LanguageDTO"/> to an instance of <see cref="Language"/>.
        /// </summary>
        /// <param name="dto"><see cref="LanguageDTO"/> to convert.</param>
        public static Language ToEntity(this LanguageDTO dto)
        {
            if (dto == null) return null;

            var entity = new Language();

            entity.LanguageID = dto.LanguageID;
            entity.LanguageName = dto.LanguageName;
            entity.UserID = dto.UserID;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Language"/> to an instance of <see cref="LanguageDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="Language"/> to convert.</param>
        public static LanguageDTO ToDTO(this Language entity)
        {
            if (entity == null) return null;

            var dto = new LanguageDTO();

            dto.LanguageID = entity.LanguageID;
            dto.LanguageName = entity.LanguageName;
            dto.UserID = entity.UserID;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="LanguageDTO"/> to an instance of <see cref="Language"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Language> ToEntities(this IEnumerable<LanguageDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Language"/> to an instance of <see cref="LanguageDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<LanguageDTO> ToDTOs(this IEnumerable<Language> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
