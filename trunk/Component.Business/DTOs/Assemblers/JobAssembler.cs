//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2016/02/22 - 20:58:48
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using JobsInABA.BL.DTOs;
using JobsInABA.DAL.Entities;

namespace JobsInABA.BL.DTOs.Assemblers
{

    /// <summary>
    /// Assembler for <see cref="Job"/> and <see cref="JobDTO"/>.
    /// </summary>
    public static partial class JobAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="JobDTO"/> converted from <see cref="Job"/>.</param>
        static partial void OnDTO(this Job entity, JobDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Job"/> converted from <see cref="JobDTO"/>.</param>
        static partial void OnEntity(this JobDTO dto, Job entity);

        /// <summary>
        /// Converts this instance of <see cref="JobDTO"/> to an instance of <see cref="Job"/>.
        /// </summary>
        /// <param name="dto"><see cref="JobDTO"/> to convert.</param>
        public static Job ToEntity(this JobDTO dto)
        {
            if (dto == null) return null;

            var entity = new Job();

            entity.JobID = dto.JobID;
            entity.BusinessID = dto.BusinessID;
            entity.Title = dto.Title;
            entity.Description = dto.Description;
            entity.JobTypeID = dto.JobTypeID;
            entity.IsActive = dto.IsActive;
            entity.IsDeleted = dto.IsDeleted;
            entity.StartDate = dto.StartDate;
            entity.EndDate = dto.EndDate;
            entity.insuser = dto.insuser;
            entity.insdt = dto.insdt;
            entity.upduser = dto.upduser;
            entity.upddt = dto.upddt;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Job"/> to an instance of <see cref="JobDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="Job"/> to convert.</param>
        public static JobDTO ToDTO(this Job entity)
        {
            if (entity == null) return null;

            var dto = new JobDTO();

            dto.JobID = entity.JobID;
            dto.BusinessID = entity.BusinessID;
            dto.Title = entity.Title;
            dto.Description = entity.Description;
            dto.JobTypeID = entity.JobTypeID;
            dto.IsActive = entity.IsActive;
            dto.IsDeleted = entity.IsDeleted;
            dto.StartDate = entity.StartDate;
            dto.EndDate = entity.EndDate;
            dto.insuser = entity.insuser;
            dto.insdt = entity.insdt;
            dto.upduser = entity.upduser;
            dto.upddt = entity.upddt;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="JobDTO"/> to an instance of <see cref="Job"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Job> ToEntities(this IEnumerable<JobDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Job"/> to an instance of <see cref="JobDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<JobDTO> ToDTOs(this IEnumerable<Job> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
