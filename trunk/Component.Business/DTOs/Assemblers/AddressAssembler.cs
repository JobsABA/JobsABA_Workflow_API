//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2016/02/22 - 20:58:45
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using JobsInABA.BL.DTOs;
using JobsInABA.DAL.Entities;

namespace JobsInABA.BL.DTOs.Assemblers
{

    /// <summary>
    /// Assembler for <see cref="Address"/> and <see cref="AddressDTO"/>.
    /// </summary>
    public static partial class AddressAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="AddressDTO"/> converted from <see cref="Address"/>.</param>
        static partial void OnDTO(this Address entity, AddressDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Address"/> converted from <see cref="AddressDTO"/>.</param>
        static partial void OnEntity(this AddressDTO dto, Address entity);

        /// <summary>
        /// Converts this instance of <see cref="AddressDTO"/> to an instance of <see cref="Address"/>.
        /// </summary>
        /// <param name="dto"><see cref="AddressDTO"/> to convert.</param>
        public static Address ToEntity(this AddressDTO dto)
        {
            if (dto == null) return null;

            var entity = new Address();

            entity.AddressID = dto.AddressID;
            entity.Title = dto.Title;
            entity.Line1 = dto.Line1;
            entity.Line2 = dto.Line2;
            entity.Line3 = dto.Line3;
            entity.City = dto.City;
            entity.State = dto.State;
            entity.ZipCode = dto.ZipCode;
            entity.CountryID = dto.CountryID;
            entity.AddressTypeID = dto.AddressTypeID;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Address"/> to an instance of <see cref="AddressDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="Address"/> to convert.</param>
        public static AddressDTO ToDTO(this Address entity)
        {
            if (entity == null) return null;

            var dto = new AddressDTO();

            dto.AddressID = entity.AddressID;
            dto.Title = entity.Title;
            dto.Line1 = entity.Line1;
            dto.Line2 = entity.Line2;
            dto.Line3 = entity.Line3;
            dto.City = entity.City;
            dto.State = entity.State;
            dto.ZipCode = entity.ZipCode;
            dto.CountryID = entity.CountryID;
            dto.AddressTypeID = entity.AddressTypeID;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="AddressDTO"/> to an instance of <see cref="Address"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Address> ToEntities(this IEnumerable<AddressDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Address"/> to an instance of <see cref="AddressDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<AddressDTO> ToDTOs(this IEnumerable<Address> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
